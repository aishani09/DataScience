# -*- coding: utf-8 -*-
"""Bitcoin Predictions - LSTM vs XGBoost.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N-dKIMV4fGsilT-oWMlAL08FVu53BsZj
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pandas.plotting import scatter_matrix

df = pd.read_csv('bitcoin.csv', parse_dates=['Date'], dayfirst=True, index_col='Date')

df.isnull().sum()

df.duplicated().sum()

df.index

sns.boxplot(data=df[['Open','High','Low','Close','Volume']])

Q1 = df[['Open','High','Low','Close','Volume']].quantile(0.25)
Q3 = df[['Open','High','Low','Close','Volume']].quantile(0.75)
IQR = Q3 - Q1
df_clean = df[~((df[['Open','High','Low','Close','Volume']] < (Q1 - 1.5 * IQR)) | (df[['Open','High','Low','Close','Volume']] < (Q1 - 1.5 * IQR))).any(axis=1)]

df_clean[['Open','High','Low','Close','Volume']].hist(bins=30, edgecolor='black', figsize=(12,8))

sns.heatmap(df_clean[['Open','High','Low','Close','Volume']].corr(), annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)

sns.pairplot(df_clean[['Open','High','Low','Close','Volume']])

plt.plot(df_clean.index, df_clean['Close'], label='Close Price', color='blue')
plt.title("Close Price over Time")
plt.ylabel("Close Price")
plt.xlabel("Year")

df_clean['Close'].rolling(window=30).mean().plot(label='30-Day Rolling Mean', color='red')
df_clean['Close'].rolling(window=30).std().plot(label='30-Day Rolling Std Dev', color='green')

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM
import xgboost as xgb
from sklearn.metrics import mean_squared_error

df = df.sort_index()

data = df[['Close']].values
scaler = MinMaxScaler()
data_scaled = scaler.fit_transform(data)

def create_sequeance(data, seq_length):
  X,y = [], []
  for i in range(len(data) - seq_length):
    X.append(data[i:i+seq_length])
    y.append(data[i+seq_length])
  return np.array(X), np.array(y)

seq_length = 30
X_lstm, y_lstm = create_sequeance(data_scaled, seq_length)

train_size = int(len(X_lstm)*0.8)
X_train_lstm, X_test_lstm = X_lstm[:train_size], X_lstm[train_size:]
y_train_lstm, y_test_lstm = y_lstm[:train_size], y_lstm[train_size:]

df['Target'] = df['Close'].shift(-1)
df.dropna(inplace=True)

for lag in range(1, seq_length+1):
  df[f'Lag_{lag}'] = df['Close'].shift(lag)
df.dropna(inplace=True)
X_xgb = df.drop(['Target'], axis=1).iloc[:,1:].values
y_xgb = df['Target'].values

X_train_xgb, X_test_xgb, y_train_xgb, y_test_xgb = train_test_split(X_xgb, y_xgb, test_size=0.2, random_state=42)

from tensorflow.keras.callbacks import EarlyStopping

lstm_model = Sequential([LSTM(50, return_sequences=True, input_shape=(seq_length, 1)), LSTM(50, return_sequences=False), Dense(25), Dense(1)])

lstm_model.compile(optimizer='Adam', loss='mean_squared_error')

early_stop = EarlyStopping(monitor='val_loss', patience=5)
history = lstm_model.fit(X_train_lstm, y_train_lstm, validation_data=(X_test_lstm, y_test_lstm), epochs=50, batch_size=32, callbacks=[early_stop])

lstm_predictions = lstm_model.predict(X_test_lstm)
lstm_predictions = scaler.inverse_transform(lstm_predictions)

lstm_rmse = np.sqrt(mean_squared_error(scaler.inverse_transform(y_test_lstm), lstm_predictions))
print(f"LSTM RMSE: {lstm_rmse}")

xgb_model = xgb.XGBRegressor(n_estimstors=500, learning_rate=0.01, max_depths=5, subsample=0.8, colsample_bytree=0.8, random_state=42)
xgb_model.fit(X_train_xgb, y_train_xgb)
xgb_predictions = xgb_model.predict(X_test_xgb)
xgb_rmse = np.sqrt(mean_squared_error(y_test_xgb, xgb_predictions))
print(f"XGBoost RMSE : {xgb_rmse}")

import matplotlib.pyplot as plt

plt.figure(figsize=(14,7))
plt.plot(df.index[-len(lstm_predictions):], scaler.inverse_transform(y_test_lstm), label='Actual Prices', color='blue')
plt.plot(df.index[-len(lstm_predictions):], lstm_predictions, label='LSTM Predictions', color='red')
plt.scatter(df.index[-len(xgb_predictions):], y_test_xgb, label='Actual Prices', color='blue', alpha=0.5)
plt.scatter(df.index[-len(xgb_predictions):], xgb_predictions, label='XGBoost Predictions', color='green', alpha=0.5)
plt.title('Bitcoin Price Predictions: LSTM vs XGBoost')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

